// Copyright (c) 2019 Razeware LLC
// See Copyright Notice page for details about the license.

// The other use case for implementing COW is to reduce reference counting
// traffic.  The following InventoryItem struct has value semantics
// because the all of the internal components have value semantics.
// However, everytime an object is copied you get 6 reference counts
// Use COW so that there is only one reference count bump when an
// InventoryItem is copied.

import class UIKit.UIColor
import class UIKit.UIImage


struct InventoryItem {
  
  private final class Storage {
    var name: String
    var cost: String
    var barcode: String
    var color: UIColor
    var images: [UIImage]
    var comment: String
    
    init(name: String, cost: String, barcode: String, color: UIColor, images: [UIImage], comment: String) {
      self.name = name
      self.cost = cost
      self.barcode = barcode
      self.color = color
      self.images = images
      self.comment = comment
    }
    func copy() -> Storage {
      print("returning copy")
      return Storage(name: name, cost: cost, barcode: barcode, color: color, images: images, comment: comment)
    }
  }
  
  private var _storage: Storage
  private var _mutatingStorage: Storage {
    mutating get {
      if !isKnownUniquelyReferenced(&_storage) {
        _storage = _storage.copy()
      }
      return _storage
    }
  }
  init(name: String, cost: String, barcode: String, color: UIColor, images: [UIImage], comment: String) {
    self._storage = Storage(name: name, cost: cost, barcode: barcode, color: color, images: images, comment: comment)
  }
  
  var name: String {
    get {
      return _storage.name
    }
    set {
      _mutatingStorage.name = newValue
    }
  }
  
  var cost: String {
    get {
      return _storage.cost
    }
    set {
      _mutatingStorage.cost = newValue
    }
  }
  
  var barcode: String {
    get {
      return _storage.barcode
    }
    set {
      _mutatingStorage.barcode = newValue
    }
  }
  
  var color: UIColor {
    get {
      return _storage.color
    }
    set {
      _mutatingStorage.color = newValue
    }
  }
  
  var images: [UIImage] {
    get {
      return _storage.images
    }
    set {
      _mutatingStorage.images = newValue
    }
  }
  
  var comment: String {
    get {
      return _storage.comment
    }
    set {
      _mutatingStorage.comment = newValue
    }
  }
}

var chair = InventoryItem(name: "Chair", cost: "$20", barcode: "001204", color: .black, images: [], comment: "placeholder")
 
var other = chair

chair.name
other.name

chair.name = "Rocking Chair"
chair.name
other.name




